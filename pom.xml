<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.eclipse.ee4j</groupId>
    <artifactId>cargo-tracker</artifactId>
    <version>2.2-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>Eclipse Cargo Tracker</name>
    <description>
        The project demonstrates how you can develop applications with the Jakarta EE platform using
        widely adopted architectural best practices like Domain-Driven Design (DDD).
    </description>
    <url>https://eclipse-ee4j.github.io/cargotracker/</url>

    <organization>
        <name>Eclipse Foundation</name>
        <url>https://www.eclipse.org/org/foundation/</url>
    </organization>

    <issueManagement>
        <system>github</system>
        <url>https://github.com/eclipse-ee4j/cargotracker/issues</url>
    </issueManagement>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.report.sourceEncoding>UTF-8</project.report.sourceEncoding>

        <maven.compiler.release>11</maven.compiler.release>
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <maven-war-plugin.version>3.3.2</maven-war-plugin.version>
        <maven-surefire-plugin.version>3.1.0</maven-surefire-plugin.version>

        <jakartaee-api.version>10.0.0</jakartaee-api.version>
        <primefaces.version>12.0.0</primefaces.version>

        <payara.version>6.2023.4</payara.version>
        <glassfish.version>7.0.4</glassfish.version>

        <!-- Test Utilities -->
        <arquillian.version>1.7.0.Final</arquillian.version>
        <arquillian-payara.version>3.0.alpha8</arquillian-payara.version>
        <junit-jupiter.version>5.9.3</junit-jupiter.version>
        <hamcrest.version>2.2</hamcrest.version>
        <assertj.version>3.21.0</assertj.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-api</artifactId>
                <version>${jakartaee-api.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit-jupiter.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
        </dependency>

        <!-- The third-party dependencies this application has -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.primefaces</groupId>
            <artifactId>primefaces</artifactId>
            <version>${primefaces.version}</version>
            <classifier>jakarta</classifier>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
            <version>3.1.1</version>
            <scope>provided</scope>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
            <version>${arquillian.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <version>${arquillian.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
            <version>3.1.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Needed for Arquillian to log -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.7</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>cargo-tracker</finalName>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <systemPropertyVariables>
                            <arquillian.launch>${arquillian.launch}</arquillian.launch>
                        </systemPropertyVariables>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${maven-war-plugin.version}</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                        <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.5.0</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>run</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <phase>integration-test</phase>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>*.xml</include>
                </includes>
                <targetPath>${project.build.testOutputDirectory}</targetPath>
            </testResource>
            <testResource>
                <directory>src/test/resources/datasource/${db.type}</directory>
                <filtering>true</filtering>
                <includes>
                    <include>test-web.xml</include>
                </includes>
                <targetPath>${project.build.testOutputDirectory}</targetPath>
            </testResource>
        </testResources>
    </build>
    <repositories>
        <repository>
            <id>sonatype-nexus-staging</id>
            <name>Sonatype Nexus Staging</name>
            <url>https://jakarta.oss.sonatype.org/content/repositories/staging/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>payara-nexus</id>
            <name>Payara Nexus Artifacts</name>
            <url>https://nexus.payara.fish/repository/payara-artifacts/</url>
        </repository>
    </repositories>

    <profiles>
        <profile>
            <id>SkipIntegrationTests</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <skipITs>true</skipITs>
            </properties>
        </profile>
        <!-- The currently supported application servers are represented as profiles -->
        <profile>
            <id>payara</id>
            <properties>
                <arquillian.launch>payara</arquillian.launch>
                <webapp.graphTraversalUrl>
                    http://localhost:8080/cargo-tracker-test/rest/graph-traversal/shortest-path
                </webapp.graphTraversalUrl>
                <db.dsClassName>org.h2.jdbcx.JdbcDataSource</db.dsClassName>
                <db.user>sa</db.user>
                <db.password>password</db.password>
                <db.port>65515</db.port>
                <db.jdbcUrl>jdbc:h2:mem:cargo-tracker-database</db.jdbcUrl>
                <db.type>h2</db.type>
                <payara.micro.jar>${project.build.directory}/payara-micro.jar</payara.micro.jar>
                <payara.micro.extraMicroOptions>
                    --port 8080 --contextroot cargo-tracker-test
                </payara.micro.extraMicroOptions>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>payara-client-ee9</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-micro-managed</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                    <version>2.1.214</version>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>fish.payara.extras</groupId>
                                    <artifactId>payara-micro</artifactId>
                                    <version>${payara.version}</version>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <destFileName>payara-micro.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!--
        Deployment using Payara and PostgreSQL.
        Requirements: create on your local or other machine a Postgresql database named CargoTracker protected with
        user and password. You can use also docker run postgres.
        Then except enabling the -Pcloud profile specify also remaining properties.
        To avoid security issues the best place to do that is a special profile in settings.xml
        where you encrypt sensitive properties, see https://maven.apache.org/guides/mini/guide-encryption.html for more.
        -->
        <profile>
            <id>cloud</id>
            <properties>
                <arquillian.launch>payara</arquillian.launch>
                <webapp.graphTraversalUrl>
                    http://localhost:8080/cargo-tracker-test/rest/graph-traversal/shortest-path
                </webapp.graphTraversalUrl>
                <db.dsClassName>org.postgresql.ds.PGSimpleDataSource</db.dsClassName>
                <db.jdbcUrl>jdbc:postgresql://localhost:5432/CargoTracker</db.jdbcUrl>
                <db.user></db.user>
                <db.password></db.password>
                <db.type>postgresql</db.type>
                <payara.micro.jar>${project.build.directory}/payara-micro.jar</payara.micro.jar>
                <payara.micro.extraMicroOptions>
                    --port 8080 --contextroot cargo-tracker-test --addJars ${project.build.directory}/postgresql.jar
                </payara.micro.extraMicroOptions>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>payara-client-ee9</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-micro-managed</artifactId>
                    <version>${arquillian-payara.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>fish.payara.extras</groupId>
                                    <artifactId>payara-micro</artifactId>
                                    <version>${payara.version}</version>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <destFileName>payara-micro.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.postgresql</groupId>
                                    <artifactId>postgresql</artifactId>
                                    <version>42.6.0</version>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <destFileName>postgresql.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>glassfish</id>
            <properties>
                <arquillian.launch>glassfish</arquillian.launch>
                <arquillian-glassfish.version>3.0.alpha1</arquillian-glassfish.version>
                <webapp.graphTraversalUrl>
                    http://localhost:8080/cargo-tracker-test/rest/graph-traversal/shortest-path
                </webapp.graphTraversalUrl>
                <db.dsClassName>org.apache.derby.jdbc.EmbeddedXADataSource</db.dsClassName>
                <db.port>1527</db.port>
                <db.jdbcUrl>jdbc:derby://localhost:${db.port}</db.jdbcUrl>
                <db.user>APP</db.user>
                <db.password>APP</db.password>
                <db.type>derby</db.type>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.omnifaces.arquillian</groupId>
                    <artifactId>glassfish-client-ee10</artifactId>
                    <version>1.2</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.omnifaces.arquillian</groupId>
                    <artifactId>arquillian-glassfish-server-remote</artifactId>
                    <version>1.2</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.glassfish.main.distributions</groupId>
                                    <artifactId>glassfish</artifactId>
                                    <type>zip</type>
                                    <version>${glassfish.version}</version>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                        <executions>
                            <execution>
                                <id>unpack-glassfish</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <configuration>
                            <executable>${project.build.directory}/glassfish7/glassfish/bin/asadmin</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <id>start-domain</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>start-domain</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>start-database</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>start-database</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-database</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>post-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>stop-database</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-domain</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>post-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>stop-domain</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>run-glassfish</id>
            <properties>
                <webapp.graphTraversalUrl>
                    http://localhost:8080/rest/graph-traversal/shortest-path
                </webapp.graphTraversalUrl>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-surefire-plugin.version}</version>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.glassfish.main.distributions</groupId>
                                    <artifactId>glassfish</artifactId>
                                    <type>zip</type>
                                    <version>${glassfish.version}</version>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                        <executions>
                            <execution>
                                <id>unpack-glassfish</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <configuration>
                            <executable>${project.build.directory}/glassfish7/glassfish/bin/asadmin</executable>
                        </configuration>
                        <executions>
                            <execution>
                                <id>start-domain</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>start-domain</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>start-database</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>start-database</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>create-jdbc-reference</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>create-jdbc-resource</argument>
                                        <argument>--connectionpoolid</argument>
                                        <argument>DerbyPool</argument>
                                        <argument>jdbc/CargoTrackerDatabase</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>deploy</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>deploy</argument>
                                        <argument>--contextroot</argument>
                                        <argument>/</argument>
                                        <argument>${project.build.directory}/${project.build.finalName}.war</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <mainClass>org.eclipse.cargotracker.manualtest.WaitForBreak</mainClass>
                                    <classpathScope>test</classpathScope>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-database</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>post-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>stop-database</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-domain</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>post-integration-test</phase>
                                <configuration>
                                    <arguments>
                                        <argument>stop-domain</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
